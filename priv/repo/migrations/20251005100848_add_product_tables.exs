defmodule DiabetesV2.Repo.Migrations.AddProductTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:products, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
      add :main_type_id, :bigint
      add :sub_type_id, :bigint
      add :category_id, :bigint
      add :name, :text, null: false
      add :description, :text, null: false
      add :serving_g, :float
      add :serving_descr, :text
      add :calories_kcal, :float
      add :carbs_g, :float
      add :fibre_g, :float
      add :starch_g, :float
      add :sugars_g, :float
      add :sugar_alcohol_g, :float
      add :protein_g, :float
      add :fat_g, :float
      add :mono_g, :float
      add :trans_g, :float
      add :poly_g, :float
      add :sat_g, :float
      add :cholesterol_mg, :float
      add :glycemic_index, :float
      add :calcium_mg, :float
      add :iron_mg, :float
      add :magnesium_mg, :float
      add :phosphorus_mg, :float
      add :potassium_mg, :float
      add :sodium_mg, :float
      add :zinc_mg, :float
      add :copper_mg, :float
      add :selenium_mcg, :float
      add :choline_mg, :float
      add :v_a_retinol_mcg, :float

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:product_sub_types, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
      add :name, :text, null: false
      add :description, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:product_sub_types, [:name], name: "product_sub_types_unique_name_index")

    create table(:product_main_types, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
    end

    alter table(:products) do
      modify :main_type_id,
             references(:product_main_types,
               column: :id,
               name: "products_main_type_id_fkey",
               type: :bigint,
               prefix: "public"
             )

      modify :sub_type_id,
             references(:product_sub_types,
               column: :id,
               name: "products_sub_type_id_fkey",
               type: :bigint,
               prefix: "public"
             )
    end

    alter table(:product_main_types) do
      add :name, :text, null: false
      add :description, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:product_main_types, [:name],
             name: "product_main_types_unique_name_index"
           )

    create table(:product_categories, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
    end

    alter table(:products) do
      modify :category_id,
             references(:product_categories,
               column: :id,
               name: "products_category_id_fkey",
               type: :bigint,
               prefix: "public"
             )
    end

    create unique_index(:products, [:name], name: "products_unique_name_index")

    alter table(:product_categories) do
      add :name, :text, null: false
      add :description, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:product_categories, [:name],
             name: "product_categories_unique_name_index"
           )

    create table(:product_aliases, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true

      add :product_id,
          references(:products,
            column: :id,
            name: "product_aliases_product_id_fkey",
            type: :bigint,
            prefix: "public"
          )

      add :name, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:product_aliases, [:name], name: "product_aliases_unique_name_index")

    create table(:ingredients, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true

      add :product_id,
          references(:products,
            column: :id,
            name: "ingredients_product_id_fkey",
            type: :bigint,
            prefix: "public"
          )

      add :ingredient_product_id,
          references(:products,
            column: :id,
            name: "ingredients_ingredient_product_id_fkey",
            type: :bigint,
            prefix: "public"
          )

      add :grams, :float, null: false
      add :weight_description, :text
      add :is_included, :boolean, null: false, default: true
      add :options, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end
  end

  def down do
    drop constraint(:ingredients, "ingredients_product_id_fkey")

    drop constraint(:ingredients, "ingredients_ingredient_product_id_fkey")

    drop table(:ingredients)

    drop_if_exists unique_index(:product_aliases, [:name],
                     name: "product_aliases_unique_name_index"
                   )

    drop constraint(:product_aliases, "product_aliases_product_id_fkey")

    drop table(:product_aliases)

    drop_if_exists unique_index(:product_categories, [:name],
                     name: "product_categories_unique_name_index"
                   )

    alter table(:product_categories) do
      remove :updated_at
      remove :inserted_at
      remove :description
      remove :name
    end

    drop_if_exists unique_index(:products, [:name], name: "products_unique_name_index")

    drop constraint(:products, "products_category_id_fkey")

    alter table(:products) do
      modify :category_id, :bigint
    end

    drop table(:product_categories)

    drop_if_exists unique_index(:product_main_types, [:name],
                     name: "product_main_types_unique_name_index"
                   )

    alter table(:product_main_types) do
      remove :updated_at
      remove :inserted_at
      remove :description
      remove :name
    end

    drop constraint(:products, "products_main_type_id_fkey")

    drop constraint(:products, "products_sub_type_id_fkey")

    alter table(:products) do
      modify :sub_type_id, :bigint
      modify :main_type_id, :bigint
    end

    drop table(:product_main_types)

    drop_if_exists unique_index(:product_sub_types, [:name],
                     name: "product_sub_types_unique_name_index"
                   )

    drop table(:product_sub_types)

    drop table(:products)
  end
end
